[{"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\index.js":"1","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\App.js":"2","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\reportWebVitals.js":"3","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Song.js":"4","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Player.js":"5","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Library.js":"6","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\LibrarySong.js":"7","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Nav.js":"8","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\data.js":"9"},{"size":478,"mtime":1608049456947,"results":"10","hashOfConfig":"11"},{"size":2023,"mtime":1608464541672,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":301,"mtime":1608178245263,"results":"14","hashOfConfig":"11"},{"size":3329,"mtime":1608463673785,"results":"15","hashOfConfig":"11"},{"size":600,"mtime":1608374002977,"results":"16","hashOfConfig":"11"},{"size":1109,"mtime":1608463746684,"results":"17","hashOfConfig":"11"},{"size":460,"mtime":1608374252515,"results":"18","hashOfConfig":"11"},{"size":3188,"mtime":1608467462693,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"rikgmf",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\index.js",[],["40","41"],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\App.js",[],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\reportWebVitals.js",[],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Song.js",[],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Player.js",["42"],"import React, {useEffect} from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {faPlay, faAngleLeft, faAngleRight, faPause} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst Player=({setSongs, setCurrentSong, currentSong, isPlaying, setIsPlaying, audioRef, songInfo, setSongInfo , songs})=>{\r\n\r\n    \r\n    //event handler\r\n    useEffect(()=>{\r\n        const newSongs= songs.map((song)=>{\r\n            if(song.id===currentSong.id){\r\n                return {\r\n                    ...song,\r\n                    active:true,\r\n                }\r\n            }\r\n            else{\r\n                return {\r\n                    ...song,\r\n                    active:false,\r\n                }\r\n            }\r\n        })\r\n\r\n        setSongs(newSongs);\r\n    },[currentSong])\r\n\r\n    const playSongHandeler= () =>{\r\n        if(isPlaying){\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }else{\r\n            audioRef.current.play(); \r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    const getTime=(time)=>{\r\n        return (\r\n            Math.floor(time/60)+\":\"+(\"0\" + Math.floor(time % 60)).slice(-2)\r\n        )\r\n    }\r\n\r\n    const dragHandler= (e) => {\r\n        audioRef.current.currentTime=e.target.value;\r\n        setSongInfo({...songInfo, currentTime: e.target.value})\r\n    }\r\n\r\n    const skipTrackHandler= async (direction)=>{\r\n        let currentIndex= songs.findIndex((song)=> song.id===currentSong.id);\r\n        if(direction==='skip-forward'){\r\n            await setCurrentSong(songs[(currentIndex+1)%songs.length]);\r\n        }\r\n        if(direction==='skip-back'){\r\n            if((currentIndex-1)%songs.length===-1){\r\n                await setCurrentSong(songs[songs.length-1]);\r\n                if(isPlaying) audioRef.current.play();\r\n                return ;\r\n            }\r\n            await setCurrentSong(songs[(currentIndex-1)%songs.length]);\r\n        }\r\n        if(isPlaying) audioRef.current.play();\r\n    } \r\n    const trackAnim={\r\n        transform: `translateX(${songInfo.animationPercentage}%)`\r\n    }\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                <div style={{background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`}} className=\"track\"> \r\n                    <input min={0}\r\n                    onChange={dragHandler}\r\n                    max={songInfo.duration || 0} \r\n                    value={songInfo.currentTime} type=\"range\"/>\r\n                    <div style={trackAnim} className=\"animate-track\"></div>\r\n                </div>\r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : '0:00'}</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon onClick={()=> skipTrackHandler('skip-back')} className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\r\n                <FontAwesomeIcon  onClick={playSongHandeler} className=\"play\"  size=\"2x\" icon={isPlaying ? faPause: faPlay } />\r\n                <FontAwesomeIcon onClick={()=> skipTrackHandler('skip-forward')} className=\"skip-forward\"  size=\"2x\" icon={faAngleRight} />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Player;","C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Library.js",[],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\LibrarySong.js",[],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\components\\Nav.js",[],"C:\\My Place\\Devlopment\\musicplayer\\reactplayer\\src\\data.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":26,"column":7,"nodeType":"49","endLine":26,"endColumn":20,"suggestions":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"56","text":"57"},[784,797],"[currentSong, setSongs, songs]"]